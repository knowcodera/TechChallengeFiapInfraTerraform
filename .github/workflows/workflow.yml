name: Terraform Infrastructure CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      # Baixa o código do repositório
      - name: Checkout code
        uses: actions/checkout@v3

      # Configura o Terraform no ambiente de CI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.6

      # Inicializa o Terraform no diretório especificado
      - name: Terraform Init
        run: terraform init -chdir=./

      # Valida os arquivos de configuração do Terraform no diretório especificado
      - name: Terraform Validate
        run: terraform validate -chdir=./

      # Realiza o plano (plan) do Terraform para ver o que será aplicado
      - name: Terraform Plan
        run: terraform plan \
          -chdir=./ \
          -var="client_id=${{ secrets.ARM_CLIENT_ID }}" \
          -var="client_secret=${{ secrets.ARM_CLIENT_SECRET }}" \
          -var="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" \
          -var="tenant_id=${{ secrets.ARM_TENANT_ID }}"

      # Aplica as mudanças do Terraform no Azure (com auto approve)
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply \
          -chdir=./ \
          -auto-approve \
          -var="client_id=${{ secrets.ARM_CLIENT_ID }}" \
          -var="client_secret=${{ secrets.ARM_CLIENT_SECRET }}" \
          -var="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" \
          -var="tenant_id=${{ secrets.ARM_TENANT_ID }}"
